W: filenames source: ancient-standards-version 3.1.1
N:
N:   The source package refers to a `Standards-Version' older than one
N:   year. Please update your package to latest policy and set this control
N:   field appropriately.
N:   
N:   If the package is already compliant with the current standards, you
N:   don't have to re-upload the package just to adjust the
N:   Standards-Version control field. However, please remember to update
N:   this field next time you upload the package.
N:
W: filenames source: source-contains-svn-control-dir .svn
N:
N:   Source contains a .svn directory. It was most likely installed by
N:   accident, since Subversion version control directories usually don't
N:   belong in packages. Export from subversion rather than checkout.
N:
W: filenames source: cvsignore-file-in-source files/.cvsignore
N:
N:   Package contains a '.cvsignore' file. It may have been installed by
N:   accident.
N:
W: filenames source: svn-commit-file-in-source files/svn-commit.tmp
N:
N:   Package source contains a 'svn-commit(.NNN).tmp' file. This file is
N:   almost certainly a left-over from a failed Subversion commit, and does
N:   not belong in a Debian package.
N:
W: filenames source: source-contains-CVS-dir CVS
N:
N:   Package contains a CVS directory. It was most likely installed by
N:   accident, since transient CVS data usually doesn't belong in packages.
N:   Export from CVS rather than use a checkout.
N:
E: filenames: binary-without-manpage testxbin
N:
N:   Each binary in /usr/bin, /usr/sbin, /bin, /sbin, or /usr/games, must
N:   have a manual page.
N:   
N:   Note, that though the `man' program has the capability to check for
N:   several program names in the NAMES section, each of these programs
N:   must have its own manual page (a symbolic link to the appropriate
N:   manual page is sufficient) because other manual page viewers such as
N:   xman or tkman don't support this.
N:   
N:   Refer to Policy Manual, section 12.1 for details.
N:
E: filenames: binary-without-manpage testxbin2
E: filenames: non-standard-toplevel-dir files/
N:
N:   The Filesystem Hierarchy Standard forbids the installation of new
N:   files or directories in the root directory, in section 3.
N:
W: filenames: file-in-unusual-dir files/.cvsignore
N:
N:   This file or symbolic link is in a directory where files are not
N:   normally installed by Debian packages. If this is deliberate, please
N:   contact lintian-maint@debian.org to make Lintian accept this as a
N:   usual directory.
N:
W: filenames: cvsignore-file-in-package files/.cvsignore
N:
N:   Package contains a '.cvsignore' file. It may have been installed by
N:   accident.
N:
W: filenames: file-in-unusual-dir files/ .tif
W: filenames: file-in-unusual-dir files/".tif
W: filenames: file-in-unusual-dir files/'\\ 
W: filenames: file-in-unusual-dir files/Maelstrom Sound
W: filenames: file-in-unusual-dir files/svn-commit.tmp
W: filenames: svn-commit-file-in-package files/svn-commit.tmp
N:
N:   Package contains a 'svn-commit(.NNN).tmp' file. This file is almost
N:   certainly a left-over from a failed Subversion commit, and does not
N:   belong in a Debian package.
N:
E: filenames: package-installs-packlist usr/lib/perl5/foo/.packlist
N:
N:   Packages built using the perl MakeMaker package will have a file named
N:   .packlist in them. Those files are useless, and (in some cases) have
N:   the additional problem of creating an architecture-specific directory
N:   name in an architecture-independent package.
N:   
N:   They can be suppressed by adding the following to debian/rules:
N:   
N:   find debian/tmp -type f -name .packlist | xargs rm -f
N:   
N:   -find debian/tmp/usr/lib/perl5 -type d -empty | xargs rmdir -p
N:   
N:   Or by telling MakeMaker to use vendor install dirs; consult a recent
N:   version of perl policy. Perl 5.6.0-12 or higher supports this.
N:
E: filenames: package-contains-ancient-file usr/lib/perl5/foo/ancient.pm 1975-01-01
N:
N:   Your package contains a file that claims to been generated more than
N:   20 years ago. This is most probably an error. Your package will be
N:   rejected by the Debian archive scripts if it contains a file with such
N:   a timestamp.
N:
W: filenames: package-contains-svn-control-dir usr/lib/perl5/.svn/
N:
N:   Package contains a .svn directory. It was most likely installed by
N:   accident, since Subversion version control directories usually don't
N:   belong in packages.
N:
W: filenames: package-contains-CVS-dir usr/lib/perl5/CVS/
N:
N:   Package contains a CVS directory. It was most likely installed by
N:   accident, since transient CVS data usually doesn't belong in packages.
N:
W: filenames: bad-permissions-for-ali-file usr/lib/ada/adalib/test.ali
N:
N:   Ada Library Information (*.ali) files are required to be read-only
N:   (mode 0444) by GNAT.
N:   
N:   If at least one user can write the *.ali file, GNAT considers whether
N:   or not to recompile the corresponding source file. Such recompilation
N:   would fail because normal users don't have write permission on the
N:   files. Moreover, such recompilation would defeat the purpose of
N:   library packages, which provide *.a and *.so libraries to link
N:   against).
N:
W: filenames: zero-byte-file-in-doc-directory usr/share/doc/filenames/README.macosx
N:
N:   Package contains a file which is empty.
N:
W: filenames: package-contains-readme-for-other-platform-or-distro usr/share/doc/filenames/README.macosx
N:
N:   package contains a README.(platform) file that contains instructions
N:   specific to a platform or distribution other than Debian and thus can
N:   most likely be removed. If it contains information that pertains to
N:   Debian, please consider renaming it, or including it in an already
N:   existing README file.
N:
W: filenames: zero-byte-file-in-doc-directory usr/share/doc/filenames/examples/very_interesting_example
W: filenames: zero-byte-file-in-doc-directory usr/share/doc/filenames/examples/very_interesting_example2.gz
W: filenames: zero-byte-file-in-doc-directory usr/share/doc/filenames/Changes.gz
E: filenames: package-installs-file-to-usr-something-x11 usr/bin/X11/
N:
N:   Packages must not provide or install files into the directories
N:   /usr/bin/X11/, /usr/include/X11/ or /usr/lib/X11/.
N:   
N:   Refer to Policy Manual, section 11.8.7 for details.
N:
E: filenames: use-of-compat-symlink usr/bin/X11/
N:
N:   This package uses a directory that, according to the Filesystem
N:   Hierarchy Standard, should exist only as a compatibility symlink.
N:   Packages should not traverse such symlinks when installing files, they
N:   should use the standard directories instead.
N:
E: filenames: package-installs-file-to-usr-something-x11 usr/bin/X11/testxbin
E: filenames: use-of-compat-symlink usr/bin/X11/testxbin
W: filenames: packages-installs-file-to-usr-x11r6 usr/X11R6/
N:
N:   Packages using the X Window System should not be configured to install
N:   files under the /usr/X11R6/ directory unless they use imake. The
N:   /usr/X11R6/ directory hierarchy should be regarded as deprecated for
N:   all packages except the X Window System itself.
N:   
N:   Programs that use GNU autoconf and automake are usually easily
N:   configured at compile time to use /usr/ instead of /usr/X11R6/, and
N:   this should be done whenever possible.
N:   
N:   Refer to Policy Manual, section 11.8.7 for details.
N:
W: filenames: packages-installs-file-to-usr-x11r6 usr/X11R6/bin/
W: filenames: packages-installs-file-to-usr-x11r6 usr/X11R6/bin/testxbin2
E: filenames: symlink-should-be-absolute usr/lib/filenames/symlink1wrong ../../../etc/symlink
N:
N:   Symbolic links between different top-level directories should be
N:   absolute.
N:   
N:   Refer to Policy Manual, section 10.5 for details.
N:
E: filenames: symlink-has-too-many-up-segments usr/lib/filenames/symlink2wrong ../../../../etc/symlink
N:
N:   The symlink references a directory beyond the root directory `/'.
N:
E: filenames: symlink-should-be-relative usr/lib/filenames/symlink3wrong /usr/lib/filenames/symlink2
N:
N:   Symlinks to files which are in the same top-level directory, should be
N:   relative according to policy (i.e., files within /usr, should be
N:   relative etc., while files from /usr to /etc should be absolute)
N:   
N:   Refer to Policy Manual, section 10.5 for details.
N:
E: filenames: lengthy-symlink usr/lib/filenames/symlink4wrong ../filenames/symlink2
N:
N:   This link goes up, and then back down into the same subdirectory.
N:   Making it shorter will improve its chances of finding the right file
N:   if the user's system has lots of symlinked directories.
N:   
N:   Refer to Policy Manual, section 10.5 for details.
N:
E: filenames: symlink-contains-spurious-segments usr/lib/filenames/symlink5wrong ../menu/../somethingelse
N:
N:   The symbolic link has needless segments like '..' and '.' in the
N:   middle. These are unneeded, and make the link longer than it could be,
N:   which is in violation of policy.
N:   
N:   Refer to Policy Manual, section 10.5 for details.
N:
E: filenames: symlink-contains-spurious-segments usr/lib/filenames/symlink6wrong ./file4
E: filenames: symlink-contains-spurious-segments usr/lib/filenames/symlink7wrong ../menu/./something
E: filenames: symlink-has-double-slash usr/lib/filenames/symlink8wrong ../menu//something
N:
N:   This symlink contains two successive slashes (//). This is in
N:   violation of policy, where it is stated that symlinks should be as
N:   short as possible
N:   
N:   Refer to Policy Manual, section 10.5 for details.
N:
E: filenames: symlink-ends-with-slash usr/lib/filenames/symlink9wrong ../menu/something/
N:
N:   This symlink ends with a slash (/). This is in violation of policy,
N:   where it is stated that symlinks should be as short as possible
N:   
N:   Refer to Policy Manual, section 10.5 for details.
N:
W: filenames: symlink-is-self-recursive usr/lib/filenames/symlink5ok+warn ..
N:
N:   The symbolic link is recursive to a higher directory of the symlink
N:   itself. This means, that you can infinitely chdir with this symlink.
N:   This is usually not okay, but sometimes wanted behaviour.
N:
W: filenames: symlink-is-self-recursive usr/lib/filenames/symlink6ok+warn .
W: filenames: symlink-is-self-recursive usr/lib/filenames/symlink7ok+warn /
W: filenames: symlink-is-self-recursive usr/lib/filenames/symlink10wrong ../../..
E: filenames: symlink-should-be-absolute usr/lib/filenames/symlink10wrong ../../..
E: filenames: lengthy-symlink usr/share/doc/filenames/version.txt.gz ../filenames/doc/version6.txt.gz
W: filenames: package-installs-nonbinary-perl-in-usr-lib-perl5 usr/lib/perl5/foo/bar.pm
N:
N:   Architecture-independent Perl code should be placed in
N:   /usr/share/perl5, not /usr/lib/perl5 unless there is at least one
N:   architecture-dependent file in the module.
N:
W: filenames: package-installs-nonbinary-perl-in-usr-lib-perl5 usr/lib/perl5/foo/ancient.pm
E: filenames: bad-menu-file-name usr/lib/menu/menu
N:
N:   The package installs a file /usr/lib/menu/menu, which is already in
N:   use by the menu package itself. The menu file should be named after
N:   the package that installs it.
N:
E: filenames: postinst-does-not-call-updatemenus usr/lib/menu/menu
N:
N:   Since the package installs a file in either /usr/lib/menu or
N:   /etc/menu-methods, the package should probably call the update-menus
N:   command in it's postinst script.
N:   
N:   For example, use the following code in your maintainer script:
N:    if [ -x /usr/bin/update-menus ] ; then update-menus ; fi
N:
E: filenames: postrm-does-not-call-updatemenus usr/lib/menu/menu
N:
N:   Since the package installs a file in either /usr/lib/menu or
N:   /etc/menu-methods, the package should probably call the update-menus
N:   command in it's postrm script.
N:   
N:   For example, use the following code in your maintainer script:
N:    if [ -x /usr/bin/update-menus ] ; then update-menus ; fi
N:
E: filenames: no-copyright-file
N:
N:   Each binary package has to include a plain file
N:   /usr/share/doc/<pkg>/copyright
N:   
N:   Refer to Policy Manual, section 12.5 for details.
N:
W: filenames: no-section-field
N:
N:   The package does not have a `Section:' field in its control file.
N:   
N:   The Section field can be included in a binary package by passing the
N:   -is or -isp flags to dpkg-gencontrol when building the package. The
N:   field is optional in binary packages.
N:   
N:   Refer to Policy Manual, section 5.3 for details.
N:
W: filenames: no-priority-field
N:
N:   The package does not have a `Priority:' field in its control file.
N:   
N:   The Priority field can be included in a binary package by passing the
N:   -ip or -isp flags to dpkg-gencontrol when building the package. The
N:   field is optional in binary packages.
N:   
N:   Refer to Policy Manual, section 5.3 for details.
N:
