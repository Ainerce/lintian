#!/usr/bin/perl -w

# Copyright (C) 1998 Richard Braakman
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
# MA 02111-1307, USA.

use strict;

sub usage {
    print <<END;
Usage: $0 [-k] [-v] testset-directory testing-directory

The -k option means do not stop after one failed test, but try
them all and report all errors.

The -v option adds extra verbosity, for debugging purposes.
END
    exit 2;
}

# Tests layout:
# Every test package is in a directory pkgname-version in the testset
# directory.  The lintian output that is expected for each package is
# in a file tags.pkgname in the testset directory.

# Running the tests:
# Each test package is copied to a subdirectory of the testing-directory,
# and built there.  Then lintian is run over the resulting .changes file,
# with its output redirected to tags.pkgname in the testing-directory.

# If the tags output is not identical to the tags.pkgname file in the
# testset-directory, then runtests will output the diff and exit with
# a failure code.

# The build output is directed to build.pkgname in the testing-directory.

# Exit codes:
# 0 - success
# 1 - one or more tests failed
# 2 - an error prevented proper running of the tests

# Turns out I might as well have written this in bash.  Oh well.

my $run_all_tests = 0;
my $verbose = 0;

# --- Parse options, such as they are.
while ($#ARGV >= 0 && $ARGV[0] =~ m/^-/) {
    if ($ARGV[0] eq '-k') {
	$run_all_tests = 1;
    } elsif ($ARGV[0] eq '-v') {
	$verbose = 1;
    } else {
	usage;
    }
    shift;
}

# --- Parse directory arguments
if ($#ARGV != 1) {
    usage;
}

my $testset = shift;
my $rundir = shift;

# --- Set and unset environment variables that lintian is sensitive to
my $LINTIAN_ROOT = $ENV{'LINTIAN_ROOT'};
if (not $LINTIAN_ROOT) {
    use Cwd;
    $ENV{'LINTIAN_ROOT'} = $LINTIAN_ROOT = cwd();
}
delete $ENV{'LINTIAN_CFG'};
delete $ENV{'LINTIAN_LAB'};
delete $ENV{'LINTIAN_DIST'};
delete $ENV{'LINTIAN_UNPACK_LEVEL'};

# --- Set the ways to call lintian and dpkg-buildpackage
my $lintian_options = '-I';
my $lintian_info_options = '-I -i';
my $dpkg_buildpackage_options = '-rfakeroot -us -uc -d';
my $lintian_path = $LINTIAN_ROOT . "/frontend/lintian";

my $testok = 0;

# --- Display output immediately
$| = 1;

# --- Let's play.

-d $rundir
    or fail("test directory $rundir does not exist\n");

if ( -d "$LINTIAN_ROOT/testset" ) {
    # does every tag have an info section?
    my $check = "$LINTIAN_ROOT/testset/check_info.pl";
    print "Checking for missing info tags ... ";
    $testok = runsystem_ok("$check $LINTIAN_ROOT");
    if ($testok) {
	print "done.\n";
    } else {
	print "FAILED!\n";
	exit 1 unless $run_all_tests;
    }
}

# can I make a lab?
print "Running static lab test ... ";
$testok = runsystem_ok("$lintian_path --lab $rundir/test_lab --setup-lab");
if ($testok) {
    runsystem("rm -r $rundir/test_lab");
    print "done.\n";
} else {
    print "FAILED!\n";
    exit 1 unless $run_all_tests;
}

# ok, I can make a static lab, now let's test the package checks
# in temporary labs
opendir(TESTDIR, $testset)
    or fail("cannot open $testset: $!\n");

my @tests = sort(readdir(TESTDIR));

closedir(TESTDIR);

for (@tests) {
    next if $_ eq '.' or $_ eq '..' or $_ eq 'CVS' or $_ eq '.svn';
    next unless -d "$testset/$_";

    my $pkgdir = $_;

    open(CHANGELOG, "$testset/$pkgdir/debian/changelog") or
	 die("Could not open $testset/$pkgdir/debian/changelog");
    my $line = <CHANGELOG>;
    chomp($line);
    close(CHANGELOG);
    $line =~ s/^.*\(//;
    $line =~ s/\).*$//;
    
    my ($pkg, $ver) = ($pkgdir, $line);
    print "Running test on $pkg $ver ... ";

    print "Cleaning up and repopulating $rundir/$pkgdir...\n" if $verbose;
    runsystem_ok("rm -rf $rundir/$pkgdir");
    runsystem("cp -rp $testset/$pkgdir $rundir");
    opendir D, "$testset" or die;
    foreach (readdir D) {
      next unless /^\Q${pkg}\E_.*\.orig\.tar\.gz$/;
      print "Symlinking $_ in $rundir...\n" if $verbose;
      symlink "../../$testset/$_", "$rundir/$_";
    }
    closedir D;
    runsystem("find $rundir -name CVS -o -name .svn -print0 | xargs -0r rm -R");

    print "Running dpkg-buildpackage $dpkg_buildpackage_options in $rundir/$pkgdir...\n" if $verbose;
    runsystem("cd $rundir/$pkgdir && dpkg-buildpackage $dpkg_buildpackage_options >../build.$pkg 2>&1");

    print "Running lintian $lintian_options on $rundir/$pkg\_$ver*.changes...\n" if $verbose;
    runsystem_ok("$lintian_path $lintian_options $rundir/$pkg\_$ver*.changes >$rundir/tags.$pkg");

    $testok = runsystem_ok("cmp -s $rundir/tags.$pkg $testset/tags.$pkg");
    if ($testok) {
	print "done.\n";
    } else {
	print "FAILED:\n";
	runsystem_ok("diff -u $testset/tags.$pkg $rundir/tags.$pkg");
	exit 1 unless $run_all_tests;
	next;
    }

    print "Running info test on $pkg $ver ... ";

    runsystem_ok("$lintian_path $lintian_info_options $rundir/$pkg\_$ver*.changes >$rundir/info_tags.$pkg");
    $testok = runsystem_ok("cmp -s $rundir/info_tags.$pkg $testset/info_tags.$pkg");
    if ($testok) {
	print "done.\n";
    } else {
	print "FAILED:\n";
	runsystem_ok("diff -u $testset/info_tags.$pkg $rundir/info_tags.$pkg");
	exit 1 unless $run_all_tests;
    }
}

# --------------
sub fail {
    print STDERR @_;
    exit 2;
}

sub runsystem {
    system(@_) == 0
	or fail("failed: @_\n");
}

sub runsystem_ok {
    my $errcode = system(@_);
    $errcode == 0 or $errcode == (1 << 8)
	or fail("failed: @_\n");
    return $errcode == 0;
}
