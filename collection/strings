#!/usr/bin/perl -w
# strings -- lintian collection script

# Copyright (C) 2009, 2010 Raphael Geissert <atomo64@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

use strict;
use warnings;

use Cwd qw(realpath);
use FileHandle;

use lib "$ENV{'LINTIAN_ROOT'}/lib";
use Lintian::Collect;
use Lintian::Command qw(spawn reap);
use Lintian::Util qw(delete_dir fail);

($#ARGV == 2) or fail('syntax: strings <pkg> <type> <dir>');

my ($pkg, $type, $dir) = @ARGV;
my $info = Lintian::Collect->new ($pkg, $type, $dir);

my $helper = realpath("$0-helper");
my @manual = ();

if ( -e "$dir/elf-index" ) {
    unlink "$dir/elf-index" or fail "unlink elf-index: $!";
}

if ( -d "$dir/strings" ) {
    delete_dir ("$dir/strings") or fail "rmdir strings: $!";
}

open ELF_INDEX, '>', "$dir/elf-index"
    or fail "Could not open 'elf-index' for writing: $!";

# The directory is required, even if it would be empty.
mkdir "$dir/strings" or
    fail "mkdir $dir/strings: $!";

chdir ("$dir/unpacked")
    or fail("cannot chdir to unpacked directory: $!");

my %opts = ( pipe_in => FileHandle->new,
             fail => 'error' );
spawn (\%opts, ['xargs', '-0r', 'strings', '-f', '--'], '|', [$helper, "$dir/strings"]);
$opts{pipe_in}->blocking(1);

foreach my $bin ($info->sorted_index) {
    my $finfo = $info->file_info ($bin);
    next unless $finfo =~ m/\bELF\b/o;
    print ELF_INDEX "$bin\n";

    next if ($bin =~ m,^/usr/lib/debug/,);
    if ($bin =~ m/[:\n\r]/) {
        # Do these "interesting cases" manual
        push @manual, $bin;
        next;
    }
    printf {$opts{pipe_in}} "%s\0", $bin;
}
close $opts{pipe_in};
reap (\%opts);


# Fall back to the safe but slower method for files with "special"
# names.
if (@manual) {
    require File::Basename;
    foreach my $file (@manual) {
        my $strdir = $dir . '/strings/' . File::Basename::dirname ($file);
        # create the dir if needed.
        unless ( -d $strdir) {
            system ('mkdir', '-p', $strdir) == 0
                or fail "mkdir -p $strdir failed " . (($? >> 8) & 256), "\n";
        }
        spawn ({out => "$dir/strings/${file}.gz", fail => 'fail'},
               ['strings', "$dir/unpacked/$file"], '|', ['gzip', '-9nc']);
    }
}
close(ELF_INDEX) or fail("cannot write elf-index file: $!");

exit 0;

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
