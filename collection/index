#!/usr/bin/perl
# unpack-binpkg-l1 -- lintian unpack script (binary packages level 1)
#
# syntax: unpack-binpkg-l1 <base-dir> <deb-file>
#
# Note that <deb-file> must be specified with absolute path.

# Copyright (C) 1998 Christian Schwarz
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

use strict;
use warnings;

# import perl libraries
use lib "$ENV{'LINTIAN_ROOT'}/lib";
use Cwd();
use Lintian::Command qw(spawn reap);
use Lintian::Processable::Package;
use Lintian::Util qw(fail get_dsc_info);

($#ARGV == 2) or fail 'syntax: index <pkg> <type> <dir>';
my ($pkg, $type, $dir) = @ARGV;

unlink "$dir/index" or fail "Could not unlink index: $!"
    if -e "$dir/index";
unlink "$dir/index.gz" or fail "Could not unlink index.gz: $!"
    if -e "$dir/index.gz";
unlink "$dir/index-errors" or fail "Could not unlink index-errors: $!"
    if -e "$dir/index-errors";

if ($type ne 'source') {
    index_deb();
} else {
    chdir "$dir/unpacked"
        or fail "chdir $dir/unpacked: $!";
    spawn ({ fail => 'error', out => "$dir/index.gz" },
           ['find', '(',  '-type', 'l',
              # If symlink
                '-printf', '%M 0/0 %s %AY-%Am-%Ad %AH:%AM %p -> %l\n', '-true',
              # elif dir [needs trailing slash]
              ')', '-o', '(',  '-type', 'd',
                '-printf', '%M 0/0 %s %AY-%Am-%Ad %AH:%AM %p/\n', '-true',
              # else (not dir and not symlink)
              ')', '-o', '-printf', '%M 0/0 %s %AY-%Am-%Ad %AH:%AM %p\n'],
           # Sort and compress
           '|', ['sort', '-k', '6'], '|', ['gzip', '-9c']);
}

exit 0;

# Creates an index for binary packages
sub index_deb {
    my (@jobs, $job);

    foreach my $file (qw(index index-errors index-owner-id)) {
        unlink "$dir/$file" or fail "$file: $!" if -f "$dir/$file";
    }

    $job = { fail => 'error',
             out  => "$dir/index.gz",
             err  => "$dir/index-errors" };
    push @jobs, $job;
    # (replaces dpkg-deb -c)
    # create index file for package
    spawn($job,
          ['dpkg-deb', '--fsys-tarfile', "$dir/deb" ],
          '|', ['tar', 'tfv', '-'],
          '|', ['sort', '-k', '6'],
          '|', ['gzip', '--best', '-c'], '&');

    $job = { fail => 'error',
             out  => "$dir/index-owner-id.gz",
             err  => '/dev/null' };
    push @jobs, $job;
    # (replaces dpkg-deb -c)
    # create index file for package with owner IDs instead of names
    spawn($job,
          ['dpkg-deb', '--fsys-tarfile', "$dir/deb" ],
          '|', ['tar', '--numeric-owner', '-tvf', '-'],
          '|', ['sort', '-k', '6'],
          '|', ['gzip', '--best', '-c'], '&');

    reap(@jobs);
    undef @jobs;

    return 1;
}

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
