#!/usr/bin/perl -w
# java-info -- lintian collection script

# Copyright (C) 2011 Vincent Fourmond
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

use strict;
use warnings;

use Archive::Zip qw( :ERROR_CODES :CONSTANTS );
use FileHandle;

use lib "$ENV{'LINTIAN_ROOT'}/lib/";
use Lintian::Collect;
use Lintian::Command qw(spawn reap);
use Lintian::Util qw(fail);

my ($pkg, $type, $dir) = @ARGV;
my $info = Lintian::Collect->new ($pkg, $type, $dir);

# Sanity check
unless ( -d "$dir/unpacked/") {
    fail "java-info called with the wrong dir argument!";
}

if ( -f "$dir/java-info" ) {
    unlink "$dir/java-info" or fail "unlink $dir/java-info: $!";
}
if ( -f "$dir/java-info.gz" ) {
    unlink "$dir/java-info.gz" or fail "unlink $dir/java-info.gz: $!";
}

# We lazily start the gzip process to avoid creating the java-info.gz
# file when there are no jar files in the package.
my %opts;

chdir ("$dir/unpacked")
    or fail "unable to chdir to unpacked: $!";

foreach my $file ($info->sorted_index) {
    my $ftype = $info->index ($file);
    next unless $ftype->is_file;
    next unless $info->file_info->{$file} =~ m/Zip archive/o;
    if ($file =~ m#\S+\.jar$#i) {
        my $has_manifest = 0;
        my $manifest;
        my $azip = Archive::Zip->new;

        open_java_info() unless %opts;
        # This script needs unzip, there's no way around.
        print {$opts{pipe_in}} "-- $file\n";

        # stringify or $azip will make a call back that fails.
        $azip->read ("$file") == AZ_OK or fail "Could not read $file: $!";

        # First, the file list:
        foreach my $member ($azip->members) {
            my $name = $member->fileName;
            my $jversion;
            next if $member->isDirectory;
            $manifest = $member if $name =~ m@^META-INF/MANIFEST.MF$@oi;
            if ($name =~ m/\.class$/o) {
                # Collect the Major version of the class file.
                my ($contents, $zerr) = $member->contents;
                fail "Failed to decompress $name of $file: $zerr"
                    unless $zerr == AZ_OK;
                # translation of the unpack
                #  NN NN NN NN, nn nn, nn nn   - bytes read (in hex, network order)
                #     $magic  , __ __, $major  - variables
                my ($magic, undef, $major) = unpack ('Nnn', $contents);
                $jversion = $major if $magic == 0xCAFEBABE;
            }
            $jversion //= '-';
            print {$opts{pipe_in}} $name, ": $jversion\n";
        }

        if ($manifest) {
            print {$opts{pipe_in}} "-- MANIFEST: $file\n";

            my ($contents, $zerr) = $manifest->contents;
            fail "Failed to decompress Manifest of $file: $zerr"
                unless $zerr == AZ_OK;
            my $first = 1;
            foreach my $line (split m/\n/, $contents) {
                $line =~ s/\r//go;
                if($line =~ m/^(\S+:)\s*(.*)/o) {
                    print {$opts{pipe_in}} "\n" unless $first;
                    $first = 0;
                    print {$opts{pipe_in}} "  $1 $2";
                }
                if($line =~ m/^ /o) {
                    print {$opts{pipe_in}} substr $line, 1;
                }
            }
            print {$opts{pipe_in}} "\n" unless $first;
        }
    }
}

if (%opts) {
    close $opts{pipe_in} or fail "cannot write java-info.gz: $!";
    reap (\%opts);
}

exit 0;

sub open_java_info {
    %opts = ( pipe_in => FileHandle->new,
              out => "$dir/java-info.gz",
              fail => 'error' );
    spawn(\%opts, ['gzip', '-9c'] );
    $opts{pipe_in}->blocking(1);
}

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
