#!/usr/bin/perl -w
# file-info -- lintian collection script

# Copyright (C) 1998 Richard Braakman
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

use strict;
use warnings;

use Cwd qw(realpath);
use FileHandle;
use lib "$ENV{'LINTIAN_ROOT'}/lib";
use Util;
use Lintian::Command qw(spawn reap);

($#ARGV == 1) or fail('syntax: file-info <pkg> <type>');
my $pkg = shift;
my $type = shift;
my $last = '';

my $helper = realpath("$0-helper");
my $outfile = realpath('./file-info');

unlink($outfile);

# Open files before we chdir, since unpacked could be a symlink (at
# the time of writing, it never is, but it could be a reasonable way
# of fixing #262783)

open(INDEX, '<', 'index')
    or fail("cannot open index file: $!");

chdir('unpacked')
    or fail("cannot chdir to unpacked directory: $!");

# We ignore failures from file because sometimes file returns a non-zero exit
# status when it can't parse a file.  So far, the resulting output still
# appears to be usable (although will contain "ERROR" strings, which Lintian
# doesn't care about), and the only problem was the exit status.
my %opts = ( pipe_in => FileHandle->new,
             out => $outfile,
             fail => 'never' );
spawn(\%opts, ['xargs', '-0r', 'file', '-F', '', '--print0', '--'], '|', [$helper]);
$opts{pipe_in}->blocking(1);

while (<INDEX>) {
    chomp;
    $_ = (split(' ', $_, 6))[5];
    s/ link to .*//;
    s/ -> .*//;
    s/(\G|[^\\](?:\\\\)*)\\(\d{3})/"$1" . chr(oct $2)/ge;
    s/\\\\/\\/;
    printf {$opts{pipe_in}} "%s\0", $_;
}
close(INDEX) or fail("cannot close index file: $!");

close $opts{pipe_in};
reap(\%opts);

# Local Variables:
# indent-tabs-mode: nil
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 sts=4 sr et
