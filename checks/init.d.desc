Check-Script: init.d
Author: Christian Schwarz <schwarz@debian.org>
Abbrev: ini
Type: binary
Needs-Info: init.d
Unpack-Level: 1

Tag: duplicate-updaterc.d-calls-in-postinst
Severity: important
Certainty: certain
Info: The <tt>postinst</tt> script calls <tt>update-rc.d</tt> several
 times for the same <tt>/etc/init.d</tt> script.

Tag: output-of-updaterc.d-not-redirected-to-dev-null
Severity: wishlist
Certainty: certain
Info: The output messages of the <tt>update-rc.d</tt> command should be
 redirected to <tt>/dev/null</tt> because it is currently very chatty
 per default.

Tag: preinst-calls-updaterc.d
Severity: important
Certainty: certain
Info: The <tt>preinst</tt> package calls <tt>update-rc.d</tt>. Instead,
 you should call it in the <tt>postinst</tt> script.
Ref: policy 9.3.3.1

Tag: duplicate-updaterc.d-calls-in-postrm
Severity: important
Certainty: certain
Info: The <tt>postrm</tt> script calls <tt>update-rc.d</tt> several
 times for the same <tt>/etc/init.d</tt> script.

Tag: prerm-calls-updaterc.d
Severity: important
Certainty: certain
Info: The <tt>prerm</tt> package calls <tt>update-rc.d</tt>. Instead,
 you should call it in the <tt>postrm</tt> script.
Ref: policy 9.3.3.1

Tag: postrm-does-not-call-updaterc.d-for-init.d-script
Severity: important
Certainty: certain
Info: An <tt>/etc/init.d</tt> script which has been registered in the
 <tt>postinst</tt> script is not de-registered in the
 <tt>postrm</tt> script.
Ref: policy 9.3.3.1

Tag: postrm-contains-additional-updaterc.d-calls
Severity: important
Certainty: certain
Info: The <tt>postrm</tt> de-registers an <tt>/etc/init.d</tt> script which
 has not been registered in the <tt>postinst</tt> script before.

Tag: file-in-etc-rc.d-marked-as-conffile
Severity: important
Certainty: certain
Ref: policy 9.3.3
Info: The symbolic links in <tt>/etc/rc?.d</tt> may not be marked as conffiles.

Tag: init.d-script-not-marked-as-conffile
Severity: important
Certainty: wild-guess
Ref: policy 9.3.2
Info: <tt>/etc/init.d</tt> scripts should be marked as conffiles.
 .
 This is usually an error, but the Policy allows for managing these files
 manually in maintainer scripts and Lintian cannot reliably detect that.

Tag: init.d-script-does-not-implement-required-option
Severity: important
Certainty: certain
Ref: policy 9.3.2
Info: The <tt>/etc/init.d</tt> scripts have to support the following
 command line arguments: start, stop, restart, force-reload.

Tag: init.d-script-not-included-in-package
Severity: important
Certainty: certain
Info: The <tt>/etc/init.d</tt> script is registered in the
 <tt>postinst</tt> script, but is not included in the package.

Tag: script-in-etc-init.d-not-registered-via-update-rc.d
Severity: normal
Certainty: possible
Info: The package installs an <tt>/etc/init.d</tt> script which is
 not registered in the <tt>postinst</tt> script. This is usually a bug,
 unless you omit the links intentionally for some reason or create the
 links some other way.

Tag: init.d-script-has-duplicate-lsb-section
Severity: important
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: This <tt>/etc/init.d</tt> script has more than one LSB keyword
 section.  These sections start with <tt>### BEGIN INIT INFO</tt> and end
 with <tt>### END INIT INFO</tt>.  There should be only one such section
 per init script.

Tag: init.d-script-has-unterminated-lsb-section
Severity: important
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: This <tt>/etc/init.d</tt> script has an LSB keyword section starting
 with <tt>### BEGIN INIT INFO</tt> but either has no matching <tt>### END
 INIT INFO</tt> or has lines between those two markers that are not
 comments.  The line number given is the first line that doesn't look like
 part of an LSB keyword section.  There must be an end marker after all
 the keyword settings and there must not be any lines between those
 markers that do not begin with <tt>#</tt>.

Tag: init.d-script-has-duplicate-lsb-keyword
Severity: normal
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: The given keyword was set twice in the LSB keyword section in this
 <tt>/etc/init.d</tt> script.  This is probably a mistake; the behavior of
 setting the same keyword twice is undefined.

Tag: init.d-script-has-unknown-lsb-keyword
Severity: minor
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: The given keyword was set in the LSB keyword section in this
 <tt>/etc/init.d</tt> script but isn't one of the known LSB keywords and
 doesn't begin with <tt>X-</tt>.  One of the standard keywords may have
 been misspelled.

Tag: init.d-script-has-bad-lsb-line
Severity: normal
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: This line in the LSB keyword section of an <tt>/etc/init.d</tt>
 script doesn't match the required formatting of that section.  Note that
 keyword settings must start with <tt>#</tt>, a single space, the keyword,
 a colon, and some whitespace, followed by the value (if any).  Only the
 Description keyword allows continuation lines, and continuation lines
 must begin with <tt>#</tt> and either a tab or two or more spaces.

Tag: init.d-script-missing-lsb-section
Severity: normal
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: This <tt>/etc/init.d</tt> script does not have an LSB keyword
 section (or the <tt>### BEGIN INIT INFO</tt> tag is incorrect).  This
 section provides description and runlevel information in a standard
 format and provides dependency information that can be used to
 parallelize the boot process.  Please consider adding it.

Tag: init.d-script-missing-lsb-keyword
Severity: normal
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: This <tt>/etc/init.d</tt> script has an LSB keyword section, but it
 is missing the given required LSB keyword.  If the value of this keyword
 should be empty, please still include it in the LSB keyword section with
 an empty value.

Tag: init.d-script-missing-lsb-short-description
Severity: wishlist
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: This <tt>/etc/init.d</tt> script has an LSB keyword section, but it
 is missing a Short-Description LSB keyword.  This field isn't directly
 used currently, but adding it is still a good idea for documentation
 purposes.

Tag: init.d-script-has-bad-start-runlevel
Severity: normal
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: The given runlevel specified in the Default-Start keyword of the LSB
 keyword section of this <tt>/etc/init.d</tt> script isn't one of the
 recognized standard runlevels (S, 0, 1, 2, 3, 4, 5, and 6).

Tag: init.d-script-has-bad-stop-runlevel
Severity: normal
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: The given runlevel specified in the Default-Stop keyword of the LSB
 keyword section of this <tt>/etc/init.d</tt> script isn't one of the
 recognized standard runlevels (0, 1, 2, 3, 4, 5, and 6).

Tag: init.d-script-has-conflicting-start-stop
Severity: normal
Certainty: certain
Ref: http://wiki.debian.org/LSBInitScripts
Info: The given runlevel was included in both the Default-Start and
 Default-Stop keywords of the LSB keyword section of this
 <tt>/etc/init.d</tt> script.  Since it doesn't make sense to both start
 and stop a service in the same runlevel, there is probably an error in
 one or the other of these keywords.

Tag: init-d-script-stops-in-s-runlevel
Severity: normal
Certainty: certain
Info: This <tt>/etc/init.d</tt> script specifies the S runlevel in
 Default-Stop in its LSB keyword section.  The S runlevel is not a real
 runlevel and is only used during boot.  There is no way to switch to it
 and hence no use for stop scripts for it, so S should be removed from
 Default-Stop.

Tag: init.d-script-uses-usr-interpreter
Severity: normal
Certainty: possible
Info: The given <tt>/etc/init.d</tt> script specifies an interpreter in
 its shebang located under <tt>/usr</tt>.  This means the init script will
 fail if run at a point in the boot sequence before the <tt>/usr</tt>
 partition has been mounted.
 .
 It also indicates that the init script may be using a non-essential
 interpreter.  Since init scripts are configuration files, they may be
 left on the system after their package has been removed but not purged.
 At that point, the package dependencies are not guaranteed to exist and
 the interpreter may therefore not be available.
 .
 It's generally best to write init scripts using <tt>/bin/sh</tt> or
 <tt>/bin/bash</tt> where possible, since they are guaranteed to always be
 available.

Tag: init.d-script-sourcing-without-test
Severity: important
Certainty: possible
Info: The given <tt>/etc/init.d</tt> script seems to be sourcing an
 <tt>/etc/default/</tt> file without checking for its existence first.
 Files in <tt>/etc/default/</tt> can be deleted by the administrator at
 any time, and init scripts are required to handle the situation
 gracefully.
Ref: policy 9.3.2

Tag: init.d-script-starts-in-stop-runlevel
Severity: normal
Certainty: certain
Info: This <tt>/etc/init.d</tt> script specifies the 6 or 0 runlevel in
 Default-Start in its LSB keyword section.  The 0 and 6 runlevels are
 meant to only stop services, not to start them.  If the intention is
 to do something that might not exactly be stopping a service at one of
 those runlevels the script should anyway specify them in Default-Stop
 and perform the actions when passed the <tt>stop</tt> argument.

Tag: init.d-script-provides-virtual-facility-in-header
Severity: normal
Certainty: certain
Info: This <tt>/etc/init.d</tt> script indicates it provides a virtual
 facility, denoted by the dollar sign in front of the name.
 Virtual facilities are declared as provided by shipping a file,
 usually named after the package to avoid file conflicts, that is
 installed in <tt>/etc/insserv.conf.d</tt> with its content on the
 following format: <tt>$virtual_facility_name +init-script-name</tt>.
Ref: http://wiki.debian.org/LSBInitScripts/DebianVirtualFacilities

Tag: init.d-script-provides-not-after-its-name
Severity: normal
Certainty: possible
Info: This <tt>/etc/init.d</tt> script indicates it provides one or
 more facilities but none is named after the name of the init script.
 Although in certain cases it might be necessary not to follow that
 naming convention, in most cases that's the right way to name the
 facility provided by the init script.
Ref: http://wiki.debian.org/LSBInitScripts

Tag: init.d-script-dependency-better-on-virtual-facility
Severity: important
Certainty: possible
Info: The given <tt>/etc/init.d</tt> script depends on a non-virtual
 facility although it should probably depend on the virtual facility
 that implies that facility. One such example is when a dependency on
 <tt>networking</tt> is declared, although the script should probably
 depend on <tt>$network</tt> instead, which will pull in whataver
 init script provides that virtual facility, therefore accomodating to
 other setups and requirements.
