# debhelper format -- lintian check script -*- perl -*-

# Copyright (C) 1999 by Joey Hess
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

package Lintian::debhelper;
use strict;

use lib "$ENV{'LINTIAN_ROOT'}/lib";
use Dep;
use Tags;
use Util;
use Lintian::Data;

# If there is no debian/compat file present but cdbs is being used, cdbs will
# create one automatically.  Currently it always uses compatibility level 5.
# It may be better to look at what version of cdbs the package depends on and
# from that derive the compatibility level....
my $cdbscompat = 5;

my $maint_commands = Lintian::Data->new ('debhelper/maint_commands');
my $miscDeps_commands = Lintian::Data->new ('debhelper/miscDepends_commands');
my $dh_commands_depends = Lintian::Data->new ('debhelper/dh_commands', '=');
my $filename_configs = Lintian::Data->new ('debhelper/filename-config-files');

# The version at which debhelper commands were introduced.  Packages that use
# one of these commands must have a dependency on that version of debhelper or
# newer.
my %versions
    = (dh                 => '7',
       dh_auto_configure  => '7',
       dh_auto_build      => '7',
       dh_auto_clean      => '7',
       dh_auto_install    => '7',
       dh_icons           => '5.0.51~',
       dh_installifupdown => '5.0.44~',
       dh_lintian         => '6.0.7~',
       dh_prep            => '7');

sub run {

my $pkg = shift;
my $type = shift;
my $info = shift;

my $seencommand = '';
my $needbuilddepends = '';
my $needtomodifyscripts = '';
my $needversiondepends = '';
my $seenversiondepends = '0';
my $compat = 0;
my $usescdbs = '';
my $seendhpython = '';
my $usescdbspython = '';
my $seendhcleank = '';
my $needmiscdepends = 0;
my %missingbdeps;

open(RULES, '<', "debfiles/rules") or fail("cannot read debian/rules: $!");
my $dhcompatvalue;
my @versioncheck;
while (<RULES>) {
    if (m/^\s+-?(dh_\w+)/) {
        my $dhcommand = $1;
	if ($dhcommand =~ /dh_testversion(?:\s+([^\s]+))?/) {
	    $needversiondepends = $1 if ($1);
	    tag "dh_testversion-is-deprecated", "";
	}
	if ($dhcommand eq 'dh_dhelp') {
	    tag "dh_dhelp-is-deprecated", "";
	}
	if ($dhcommand eq 'dh_suidregister') {
	    tag "dh_suidregister-is-obsolete", "";
	}
	if ($dhcommand eq 'dh_clean' and m/\s+\-k(\s+.*)?$/) {
	    $seendhcleank = 1;
	}
	# if command is passed -n, it does not modify the scripts
	if ($maint_commands->known($dhcommand) and not m/\s+\-n\s+/) {
	    $needtomodifyscripts = 1;
	}
	if ($miscDeps_commands->known($dhcommand)) {
	    $needmiscdepends = 1;
	}
	if ($dh_commands_depends->known($dhcommand)) {
	    my $dep = $dh_commands_depends->value($dhcommand);
	    $missingbdeps{$dep} = $dhcommand;
	}
	if ($versions{$dhcommand}) {
	    push (@versioncheck, $dhcommand);
	}
	$seencommand = 1;
	$needbuilddepends = 1;
    } elsif (m,^\s+dh\s+,) {
	$seencommand = 1;
	$needbuilddepends = 1;
	$needtomodifyscripts = 1;
	$needmiscdepends = 1;
	push (@versioncheck, 'dh');
    } elsif (m,^include\s+/usr/share/cdbs/1/rules/debhelper.mk,) {
	$seencommand = 1;
	$needbuilddepends = 1;
	$needtomodifyscripts = 1;
	$needmiscdepends = 1;

	# CDBS sets DH_COMPAT but doesn't export it.  It does, however, create
	# a debian/compat file if none was found; that logic is handled later.
	$dhcompatvalue = $cdbscompat;
	$usescdbs = 1;
    } elsif (/^\s*export\s+DH_COMPAT\s*:?=\s*([^\s]+)/) {
	$needversiondepends = $1;
    } elsif (/^\s*export\s+DH_COMPAT/) {
	$needversiondepends = $dhcompatvalue if $dhcompatvalue;
    } elsif (/^\s*DH_COMPAT\s*:?=\s*([^\s]+)/) {
	$dhcompatvalue = $1;
	# one can export and then set the value:
	$needversiondepends = $1
	    if ($needversiondepends);
    }
    if (/^\s+dh_python\s/) {
        $seendhpython = 1;
    } elsif (m,^include\s+/usr/share/cdbs/1/class/python-distutils.mk,) {
        $usescdbspython = 1;
    }
}
close RULES;

return unless $seencommand;

my $pkgs = $info->binaries;
my $single_pkg = keys(%$pkgs) == 1 ? $pkgs->{(keys(%$pkgs))[0]} : '';

for my $binpkg (keys %$pkgs) {
    my ($weak_depends, $strong_depends, $depends) = ('','','');
    local $/;

    foreach my $field (qw(pre-depends depends)) {
	$strong_depends .= $info->binary_field($binpkg, $field);
    }
    foreach my $field (qw(recommends suggests)) {
	$weak_depends .= $info->binary_field($binpkg, $field);
    }
    $depends = $weak_depends . $strong_depends;

    tag 'debhelper-but-no-misc-depends', $binpkg
	if $needmiscdepends and $depends !~ m/\$\{misc:Depends\}/
	   and $pkgs->{$binpkg} eq 'deb';

    tag 'weak-dependency-on-misc-depends', $binpkg
	if $weak_depends =~ m/\$\{misc:Depends\}/
	   and $pkgs->{$binpkg} eq 'deb';
}

my $compatnan = 0;
# Check the compat file.  Do this separately from looping over all of the
# other files since we use the compat value when checking for brace expansion.
if (-f 'debfiles/compat') {
    my $compat_file = slurp_entire_file('debfiles/compat');
    ($compat) = split(/\n/, $compat_file);
    $compat =~ s/^\s+$//;
    if ($compat) {
	chomp $compat;
	if ($compat !~ m/^\d+$/) {
	    tag 'debhelper-compat-is-not-a-number', $compat;
	    $compat =~ s/[^\d]//g;
	    $compatnan = 1;
	}
	if ($needversiondepends) {
	    tag 'declares-possibly-conflicting-debhelper-compat-versions',
		"rules=$needversiondepends compat=$compat";
	} else {
	    # this is not just to fill in the gap, but because debhelper
	    # prefers DH_COMPAT over debian/compat
	    $needversiondepends = $compat;
	}
    } else {
	tag 'debhelper-compat-file-is-empty';
    }
}
if ($needversiondepends !~ m/^\d+$/ and not $compatnan) {
    tag 'debhelper-compatibility-version-is-not-a-number', $needversiondepends;
    $needversiondepends =~ s/[^\d]//g;
    $compatnan = 1;
}

# Check the files in the debian directory for various debhelper-related
# things.
my $bdepends;
opendir(DEBIAN, 'debfiles')
    or fail("Can't open debfiles directory.");
while (defined(my $file=readdir(DEBIAN))) {
    if ($file =~ m/^(?:(.*)\.)?(?:post|pre)(?:inst|rm)$/) {
	next unless $needtomodifyscripts;

	# They need to have #DEBHELPER# in their scripts.  Search for scripts
	# that look like maintainer scripts and make sure the token is there.
        my $binpkg = $1 || '';
	open(IN, '<', "debfiles/$file")
	    or fail("Can't open debfiles/$file: $!");
	my $seentag = '';
	while (<IN>) {
	    if (m/\#DEBHELPER\#/) {
		$seentag = 1;
		last;
	    }
	}
	close IN;
	if (!$seentag) {
	    unless (($binpkg && exists($pkgs->{$binpkg})
		     && ($pkgs->{$binpkg} eq 'udeb'))
		    or (!$binpkg && ($single_pkg eq 'udeb'))) {
		tag "maintainer-script-lacks-debhelper-token", "debian/$file";
	    }
	}
    } elsif ($file =~ m/^control$/) {
        my ($control) = read_dpkg_control("debfiles/$file");

	# Collect dependency information from debian/control.
        $bdepends = '';
        for my $field ('build-depends', 'build-depends-indep') {
            next unless $control->{$field};
            $bdepends .= ', ' if $bdepends;
            $bdepends .= $control->{$field};
        }
	my $bdepends_noarch = Dep::parse_noarch($bdepends);
        $bdepends = Dep::parse($bdepends);
        if ($needbuilddepends && ! Dep::implies($bdepends, Dep::parse('debhelper'))) {
	    tag "package-uses-debhelper-but-lacks-build-depends", "";
	}
	while (my ($dep, $command) = each %missingbdeps) {
	    next if $dep eq 'debhelper'; #handled above
	    tag 'missing-build-dependency-for-dh_-command', "$command=$dep"
		unless (Dep::implies($bdepends_noarch, Dep::parse($dep)));
	}
    } elsif ($file =~ m/^ex\.|\.ex$/i) {
        tag "dh-make-template-in-source", "debian/$file";
    } else {
	my $base = $file;
	$base =~ s/^[.]+\.//;

	# Check whether this is a debhelper config file that takes a list of
	# filenames.  If so, check it for brace expansions, which aren't
	# supported.
	if ($filename_configs->known($base)) {
	    next if $compat < 3;
	    open (IN, '<', "debfiles/$file")
		or fail("Can't open debfiles/$file: $!");
	    local $_;
	    while (<IN>) {
		next if /^\s*$/;
		next if (/^\#/ and $compat >= 5);
		if (m/(?<!\\)\{(?:[^\s\\\}]+?,)+[^\\\}\s]+\}/) {
		    tag 'brace-expansion-in-debhelper-config-file',
			"debian/$file";
		}
	    }
	    close IN;
	}
    }
}
closedir(DEBIAN);

# Check for Python policy usage and the required debhelper dependency for
# dh_python policy support.  Assume people who intentionally set pycompat to
# something earlier than 2 know what they're doing.  Skip CDBS packages since
# CDBS creates pycompat internally at build time.
if ($seendhpython && !$usescdbspython) {
    if (open(PYCOMPAT, '<', "debfiles/pycompat")) {
	local $/;
	my $pycompat = <PYCOMPAT>;
	close PYCOMPAT;
    } else {
	tag "uses-dh-python-with-no-pycompat", "";
    }
}

if ($usescdbs and not $needversiondepends) {
    $needversiondepends = $cdbscompat;
}
$needversiondepends ||= 1;
if ($needversiondepends < 4) {
    tag "package-uses-deprecated-debhelper-compat-version", $needversiondepends;
} elsif ($needversiondepends > 5 and ! Dep::implies($bdepends, Dep::parse("debhelper (>= $needversiondepends)"))) {
    tag "package-lacks-versioned-build-depends-on-debhelper", $needversiondepends;
} elsif (@versioncheck) {
    my %seen;
    @versioncheck = grep { !$seen{$_}++ } @versioncheck;
    for my $program (@versioncheck) {
        my $required = $versions{$program};
        tag 'debhelper-script-needs-versioned-build-depends', $program, "(>= $required)"
            unless Dep::implies($bdepends, Dep::parse("debhelper (>= $required)"));
    }
}

if ($seendhcleank and $compat >= 7) {
    tag "dh-clean-k-is-deprecated";
}

}

1;

# Local Variables:
# indent-tabs-mode: t
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 ts=8 noet shiftround
