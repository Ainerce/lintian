# java -- lintian check script -*- perl -*-

# Copyright (C) 2011 Vincent Fourmond
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

package Lintian::java;
use strict;
use warnings;

use lib "$ENV{'LINTIAN_ROOT'}/checks/";

use Lintian::Tags qw(tag);
use Util;


sub run {

my $pkg = shift;
my $type = shift;
my $info = shift;

my $java_info = $info->java_info;
my $missing_jarwrapper = 0;
my $has_classpath = 0;
my $has_public_jars = 0;

my @java_lib_depends = ($info->relation('strong')->unparse() =~
			/(lib[^\s,]+-java)/g);

# We first loop over jar files to find problems

for my $jar_file (keys %{$java_info}) {
    my $manifest = $java_info->{$jar_file};

    if($manifest->{'Manifest-Version'}) {
	# We do have a real JAR with a real manifest.

	my $operm = $info->{index}->{$jar_file}->{operm};
	if(($operm & 01 or
	    $operm & 010 or $operm & 0100)) {
	    # Executable ?
	    tag "executable-jar-without-main-class", "$jar_file" unless
		$manifest->{'Main-Class'};

	    # Here, we need to check that the package depends on
	    # jarwrapper.
	    if(! $info->relation('strong')->implies('jarwrapper')) {
		$missing_jarwrapper = 1;
	    }
	}
	elsif ($jar_file !~ m#^usr/share/#) {
	    tag "jar-not-in-usr-share", "$jar_file";
	}
    }
    if($jar_file =~ m#^usr/share/java#) {
	$has_public_jars = 1;
    }

    my $cp = $manifest->{'Class-Path'};
    # Only run the tests when a classpath is present
    if($cp) {
	my $relative = 0;
	my $outside_usr_share = 0;
	my @paths = split(/\s+/, $cp);
	$has_classpath = 1;
	for my $p (@paths) {
	    if($p) {
		if($p !~ m#^/#) {
		    if($p =~ m#/#) {
			# Relative path with subdirectories.
			$relative++;
		    }

		    # @todo add an info tag for relative paths, to educate
		    # maintainers ?
		}
		elsif($p !~ m#/usr/share/#) {
		    $outside_usr_share++;
		}
	    }
	}

	if($relative) {
	    tag "classpath-contains-relative-path", "$jar_file: $cp";
	}

	if($outside_usr_share) {
	    tag "classpath-contains-files-not-in-usr-share", "$jar_file: $cp";
	}
    }
}

if($missing_jarwrapper) {
    tag 'missing-dep-on-jarwrapper';
}

if(! $has_classpath && @java_lib_depends) {
    tag "missing-classpath", join(", ", @java_lib_depends);
}

if(! $has_public_jars && $pkg =~ /^lib[^\s,]+-java$/) {
    tag "javalib-but-no-public-jars";
}

}
1;
